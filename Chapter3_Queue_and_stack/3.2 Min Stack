# 最简单的方法就是用另一个stack来keep tracking最小的点。
# 其次就是更优秀的省空间的方法，通过判断当前加入的点是否小于最小点来判断说是不是要updata min stack;
# 在弹出的时候，如果弹出的点不等于min(), 那么就可以不用pop min stack.

class MinStack:
    
    def __init__(self):
        # do intialization if necessary
        self.stack = []
        self.min_stack = []

    """
    @param: number: An integer
    @return: nothing
    """
    def push(self, number):
        # write your code here
        self.stack.append (number)
        if len(self.min_stack) == 0:
            self.min_stack.append (number)
        else:
            self.min_stack.append (min(number, self.min_stack[-1] ))

    """
    @return: An integer
    """
    def pop(self):
        # write your code here
        if len(self.min_stack) == 0:
            return -1
        else:
            self.min_stack.pop()
            return self.stack.pop()
        

    """
    @return: An integer
    """
    def min(self):
        # write your code here
        return self.min_stack[-1]

// Better solution
class MinStack:
    
    def __init__(self):
        # do intialization if necessary
        self.stack = []
        self.min_stack = []

    """
    @param: number: An integer
    @return: nothing
    """
    def push(self, number):
        # write your code here
        self.stack.append (number)
        if len(self.min_stack) == 0:
            self.min_stack.append (number)
        else:
            if number <= self.min_stack[-1]:
                self.min_stack.append (number)

    """
    @return: An integer
    """
    def pop(self):
        # write your code here
        if len(self.min_stack) == 0:
            return -1
        else:
            curr =  self.stack.pop()
            if curr == self.min():
                self.min_stack.pop()
            return curr
        

    """
    @return: An integer
    """
    def min(self):
        # write your code here
        return self.min_stack[-1]
