# this also refer to the Leetcode # 86:
# Given a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.
# You should preserve the original relative order of the nodes in each of the two partitions.
# For example,
# Given 1->4->3->2->5->2 and x = 3,
# return 1->2->2->4->3->5.

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def partition(self, head, x):
        """
        :type head: ListNode
        :type x: int
        :rtype: ListNode
        """
        if head == None:
            return head
        tail, curr = head, head
        dummy = ListNode(0)
        dummy.next = head
        pre = dummy
        # find the tail node: node.next == None
        while tail.next != None:
            tail = tail.next
        curr_tail = tail
        while curr != curr_tail:
            #print curr.val
            if curr.val >= x:
                tail.next = curr
                pre.next = curr.next
                curr = curr.next
                tail = tail.next
                tail.next = None
            else:
                curr = curr.next
                pre = pre.next
        if curr_tail.val >= x:
            tail.next = curr
            pre.next = curr.next
            curr = curr.next
            tail = tail.next
            tail.next = None
        return dummy.next
