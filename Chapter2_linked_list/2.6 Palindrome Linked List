# this is leetcode 234, I reversed the first part of linked list and then compare with the second part:

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if head == None:
            return True
        slow, fast = head, head
        pre = None
        # [1,2,3,4,5] -->
        # slow: 1, 2, 3
        # fast: 1, 3 ,5
        # [1,2,3,4,5,6] -->
        # slow: 1, 2, 3, 4
        # fast: 1, 3 ,5, None
        # fast, slow to find the mid of linked list:
        while fast != None and fast.next != None:
            fast = fast.next.next
            temp = slow.next
            slow.next = pre
            pre = slow
            slow = temp
        if fast != None:
            slow = slow.next
        while slow != None:
            if slow.val == pre.val:
                slow = slow.next
                pre = pre.next
            else:
                return False
        return True
                
    
        Palindrome Linked List
