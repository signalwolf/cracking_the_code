# leetcode 2. Add Two Numbers
# You are given two non-empty linked lists representing two non-negative integers. 
# The digits are stored in reverse order and each of their nodes contain a single digit. 
# Add the two numbers and return it as a linked list.
# You may assume the two numbers do not contain any leading zero, except the number 0 itself.
# Solution
# Need to think 5 + 5 == 10 case.
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        advance = 0
        dummy = ListNode (0)
        l3 = dummy
        while l1 != None and l2 != None:
            curr = l1.val + l2.val + advance
            advance = curr / 10
            l3.next = ListNode (curr%10)
            l1, l2, l3 = l1.next, l2.next, l3.next
        while l1 != None:
            curr = l1.val + advance
            advance = curr / 10
            l3.next = ListNode (curr%10)
            l1, l3 = l1.next, l3.next
        while l2 != None:
            curr = l2.val + advance
            advance = curr / 10
            l3.next = ListNode (curr%10)
            l2, l3 = l2.next, l3.next
        if advance != 0:
            l3.next = ListNode (advance%10)
        return dummy.next
