# Lintcode 463. Tried 4 method to sort, bubble, selection, insertion, merge, quick

class Solution:
    """
    @param: A: an integer array
    @return: 
    """
    
    def helper (self, A, start, end):
        if start >= end:
            return 
        curr = A[start]
        left, right = start + 1, end
        while left <= right:
            if A[left] <= curr and A[right] >= curr:
                left += 1
                right -= 1
            elif A[right] >= curr:
                right -= 1
            elif A[left] <= curr:
                left += 1
            else:
                temp = A[left]
                A[left] = A[right]
                A[right] = temp
        temp = A[start]
        A[start] = A[right]
        A[right] = temp
        
        self.helper (A, start, right - 1)
        self.helper (A, right + 1, end)
            
    
    def sortIntegers(self, A):
        # write your code here
        
        # bubble sort: 
        # [3,2,1]
        # last: 2, curr range: 0, 1
        # for last in xrange (len(A) - 1, 0, -1):
        #     # range : 0 -- > len(A) - 2
        #     for curr in xrange (last):
        #         if A[curr] > A[curr + 1]:
        #             temp = A [curr + 1] 
        #             A[curr + 1] = A[curr]
        #             A[curr] = temp
        # return A
        
        # selection sort:
        # [3,2,1]
        # last: 2, curr range: 0, 2
        # maxind = 0 --> [1,2,3]
        # last: 1, curr range: 0,1
        # maxind = 0 --> maxind = 
        # for last in xrange (len(A) - 1, 0 , -1):
        #     # curr range: 0, lenA - 1
        #     max_index = 0
        #     for curr in xrange (last + 1):
        #         if A[curr] > A[max_index]:
        #             max_index = curr
        #     if max_index != last:
        #         temp = A[last]
        #         A[last] = A[max_index]
        #         A[max_index] = temp
        # return A
                
        # insertion sort: 
        # for curr in xrange (len(A)):
        #     curr_val = A[curr]
        #     posistion = curr
        #     while posistion > 0 and A[posistion - 1] > curr_val:
        #         A[posistion] = A[posistion - 1]
        #         posistion = posistion - 1
        #     A[posistion] = curr_val
        # return A
        
        # merge sort: divide and conquer solution
        # if len(A) == 0 or len(A) == 1: return A
        # mid = len(A) / 2
        # # divide it
        # left = self.sortIntegers (A[:mid])
        # right = self.sortIntegers (A[mid:])
        
        # # merge left and right, left, right already sorted:
        # ind_left, ind_right , ind_result = 0 , 0 , 0
        # while ind_left < len(left) and ind_right < len(right):
        #     if left[ind_left] > right[ind_right]:
        #         A[ind_result] = right[ind_right]
        #         ind_right += 1
        #     else:
        #         A[ind_result] = left[ind_left]
        #         ind_left += 1
        #     ind_result += 1
        # if ind_left != len(left):
        #     A[ind_result:] = left [ind_left:]
        # if ind_right != len(right):
        #     A[ind_result:] = right[ind_right:]
        # return A
        
        # Quick sort: traverse solution 
        # Define: Alist, start, end
        # Reduce: 
        # Return: if start == end, return nothing.
        if len(A) == 0 or len(A) == 1: return A
        self.helper (A, 0, len(A) - 1)
        
        
        
        
        
