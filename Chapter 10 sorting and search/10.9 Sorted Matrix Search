# Lintcode 28. Search a 2D Matrix
# think the 2D matrix as an long list, then process the list, you just needed to find how to map the matrix's inde
# to the list's index and vise versa

class Solution:
    """
    @param: matrix: matrix, a list of lists of integers
    @param: target: An integer
    @return: a boolean, indicate whether matrix contains target
    """
    def searchMatrix(self, matrix, target):
        # write your code here
        # this basically is a M * N size list.
        # use binary search can find the answer
        # posision = i * (len(matrix[0])) + j
        # for example: 3 is [0][1], then it is 0 + 1
        # 11 is [1][1], then it is 4 + 1
        # in another word: i = posision / len(matrix[0]), j = %
        row= len(matrix)
        if row == 0: return False
        column = len(matrix[0])
        if column == 0: return False
        start, end = 0, row * column - 1
        while start + 1 < end:
            mid = (start + end) / 2
            if matrix [mid / column][mid % column] == target:
                return True
            elif matrix [mid / column][mid % column] > target:
                end = mid
            else:
                start = mid
        if matrix [start / column][start % column] == target:
            return True
        if matrix [end / column][end % column] == target:
            return True
        else:
            return False
                


class Solution:
    """
    @param: matrix: matrix, a list of lists of integers
    @param: target: An integer
    @return: a boolean, indicate whether matrix contains target
    """
    def searchMatrix(self, matrix, target):
        m = len(matrix)
        if m == 0:
            return False
        n = len(matrix[0])
        if n == 0:
            return False
        temp = []
        for i in xrange(m):
            for j in xrange(n):
                temp.append(matrix[i][j])
        start, end = 0, len(temp) - 1
        while start + 1 < end:
            mid = (end - start) / 2 + start
            if temp[mid] == target:
                return True
            elif temp[mid] < target:
                start = mid
            else:
                end = mid
        if temp[start] == target or temp[end] == target:
            return True
        else:
            return False
            
        # if type (matrix) == type(1) :
        #     return False
        # elif len(matrix) == 0:
        #     return False
        # else:
        #     row = len(matrix)
        #     column = len(matrix[0])
        #     # if type(matrix[0]) == type(1):
        #     #     column = 1
        #     # else:
        #     #     column = len(matrix[0])
            
        #     if column == 1 and row == 1:
        #         if matrix[0] == target:
        #             return True
        #         else:
        #             return False
        #     else:
        #         start = 0
        #         end = row * column -1
        #         while start + 1 < end:
        #             mid = start + (end - start)/2
        #             column_m = mid / column
        #             row_m = mid % column
        #             #print column_m, row_m, matrix[column_m][row_m]
        #             if matrix[column_m][row_m] == target:
        #                 return True
        #             elif matrix[column_m][row_m] < target:
        #                 start = mid
        #             elif matrix[column_m][row_m] > target:
        #                 end = mid
        #         column_s, column_e = start/column, end/column
        #         row_s, row_e = start%column, end%column
        #         if matrix[column_s][row_s] == target:
        #             return True
        #         elif matrix[column_e][row_e] == target:
        #             return True
        #         else:
        #             return False
