
一． 位操作基础
在计算机中所有数据都是以二进制的形式储存的。位运算其实就是直接对在内存中的二进制数据进行操作，因此处理数据的速度非常快。
基本的位操作符有与、或、异或、取反、左移、右移这6种：
a. &: 与： 两个位置都为1,的话，结果才为1
b. |: 或： 两个位置只要有一个为1，结果就为1
c. ^: 异或： 两个相同就是0，两个不同就是1
d. ~: 取反： 0变1， 1 变 0
e. <<: 左移： 向左移动后，超出的全部丢弃，低位补0
f. >>: 右移： 向右移动后，超出的全部丢弃，高位补0。如果是有符号数，则其高位的补充可能会有所不同

二：操作上的小技巧：
1. 判断奇数偶数： 奇偶数的话，通过最后一位就能判断，如果是奇数，则最后一位一定是1；所以一个数 a & 1 == 1便可以判断了，不需要说 a%2, 这样一般更快
2. 互换数值：a 与 b:通过异或这种方法不需要使用额外的memory。
void Swap(int &a, int &b)   
{  
    if (a != b)  
    {  
        a ^= b;  # curr_a = a ^ b
        b ^= a;  # new_b = b ^ curr_a = b ^ a ^ b = (b ^ b) ^ a = a 
        a ^= b;  # new_a = curr_a ^ new_b = a ^ a = a ^ b ^ a = b
    }  
}  
3. 变换符号：通过取反后再加一就能得到这个
例如对于-11和11，可以通过下面的变换方法将-11变成11
      1111 0101(二进制) –取反-> 0000 1010(二进制) –加1-> 0000 1011(二进制)
同样可以这样的将11变成-11
      0000 1011(二进制) –取反-> 0000 0100(二进制) –加1-> 1111 0101(二进制)
因此变换符号只需要取反后加1即可。

4. 
