# Python 中精度的接收是有问题的，float type只能接收17位小数的精度；当我们需要超过它的小数时可以通过使用decimal来得到。

from decimal import Decimal
class Solution:
    """
    @param: n: Given a decimal number that is passed in as a string
    @return: A string
    """
    def valid (self, n):
        # input: float number smaller than 0
        # output: if this float number can be represent in bits, then return it
        # if the float number can't do it, then return False
        output = ''
        frac = 0.5
        count = 0
        while n > 0 and count < 32:
            #print str(n), frac
            if n < frac:
                output += '0'
            else:
                output += '1'
                n -= Decimal(frac)
            frac /= 2
            count += 1
        if n > 0:
            return False
        else:
            return output
    
    def binaryRepresentation(self, n):
        # write your code here
        #print Decimal (n)
        int_n = int (float(n))
        frac_n = Decimal(n) - Decimal(int_n)
        # print int_n, frac_n
        if frac_n == 0:
            frac_o = '0'
        else:
            frac_o = self.valid (frac_n)
        if frac_o == False:
            return 'ERROR'
        else:
            int_o = str(bin(int_n))[2:]
            if frac_o == '0':
                return int_o
            return '.'.join([int_o,frac_o])
            
