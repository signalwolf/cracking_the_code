# Lintcode 17:
class Solution:
    
    """
    @param: nums: A set of numbers
    @return: A list of lists
    """
    
    def helper (self, nums, curr, result, start):
        
        #print curr, start, result
       while start != len(nums):
            result.append (curr + [nums[start]])
            self.helper (nums, curr + [nums[start]], result, start + 1)
            start += 1
    
    def subsets(self, nums):
        # write your code here
        # recursion:
            # define : 
            # out:
            # initial: 
        if len(nums) == 0:
            return [[]]
        nums.sort()
        result, curr  = [], []
        self.helper (nums, curr, result, 0)
        result.append ([])
        return result

# 07:13 -- 07:39: 25mins
# run time: 78ms, 4.8%; 58ms, 28%; 55ms, 34%; 46ms, 76%

class Solution(object):
    def helper (self, n, nums):
        # notice the original len(nums) == 1 case
        output = []
        if n == len(nums):
            output = [nums]
        elif n == 1:
            for i in nums:
                output.append ([i])
        else:
            for i in xrange (len(nums)):
                feedback = self.helper ( n - 1, nums[i + 1: ])
                for temp in feedback:
                    output.append ([nums[i]] + temp)
        return output
        
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if len(nums) >= 0:
            output = [[]]
        for i in xrange (1, len(nums) + 1):
            feedback = self.helper (i , nums)
            for i in feedback:
                output.append (i)
        return output

class Solution(object):
    def helper (self, nums, index, curr, result):
        for i in xrange (index, len(nums)):
            # [1] ---> [1,]
            result.append (curr + [nums[i]])
            self.helper (nums, i + 1, curr + [nums[i]], result)
        
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        # DFS
        # define: index (loop from index to end), nums, curr, result
        # change: loop over level 1: [1] --> [1,2] --> [1,2,3] 
        #                                    [1,3]
        #                            [2] --> [2,3]
        #                            [3]
        # return: top level loop end
        if len(nums) == 0: return [[]]
        result = [[]]
        self.helper (nums, 0, [], result)
        return result
