# lintcode 15: 
# My solution #1 is keep trim the list and post to lower level, I think this is costly 
# My solution #2 is basically keep an used list and update it. Then check if the used[start] is used. 
class Solution:
    """
    @param: nums: A list of integers.
    @return: A list of permutations.
    """
    # define:
    # swith: loop over all element, remove it and transfer to next level
    # out: when the len (remain == 0), add it to result.
    def helper (self, nums, permutation, result, used):
        if len(permutation) == len(nums):
            #print permutation
            result.append (permutation)
        for i in xrange(len(nums)):
            if used[i] == 1:
                continue
            else:
                used[i] = 1
                self.helper (nums, permutation + [nums[i]], result, used)
                used[i] = 0

    def permute(self, nums):
        # write your code here
        if nums is None:
            return []
        if len(nums) == 0:
            return [[]]
        permutation, result, used = [], [], [0] * len(nums)
        self.helper (nums, permutation, result, used)
        return result
  
class Solution:
    """
    @param: nums: A list of integers.
    @return: A list of permutations.
    """
    
    def helper (self, nums, result, curr):
        if len(nums) == 0:
            result.append (curr)
        start = 0
        while start < len(nums):
            self.helper (nums[:start] + nums[start + 1:], result, curr + [nums[start]])
            start += 1
            # [2,3], [], [1] --> [3], [], [1,2] --> [],[],[1,2,3]
            #                    [2], [], [1,3] -->
    
    def permute(self, nums):
        # write your code here
        # define: receive the nums, the final results, the curr selection
        #       for example: [2,3], [], [1]
        # change: remove one from nums to curr and then transfer to next level
        #       for example: [2,3], [], [1] --> [3],[],[1,2]
        # out: 
        #       if the len(nums) == 0, we add curr selection to final
        if len(nums) == 0: return [[]]
        result, curr = [], []
        self.helper (nums, result, curr)
        return result
