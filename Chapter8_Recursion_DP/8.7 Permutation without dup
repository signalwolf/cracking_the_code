# lintcode 15: 
class Solution:
    """
    @param: nums: A list of integers.
    @return: A list of permutations.
    """
    # define:
    # swith: loop over all element, remove it and transfer to next level
    # out: when the len (remain == 0), add it to result.
    def helper (self, nums, permutation, result, used):
        if len(permutation) == len(nums):
            #print permutation
            result.append (permutation)
        for i in xrange(len(nums)):
            if used[i] == 1:
                continue
            else:
                used[i] = 1
                self.helper (nums, permutation + [nums[i]], result, used)
                used[i] = 0

    def permute(self, nums):
        # write your code here
        if nums is None:
            return []
        if len(nums) == 0:
            return [[]]
        permutation, result, used = [], [], [0] * len(nums)
        self.helper (nums, permutation, result, used)
        return result
