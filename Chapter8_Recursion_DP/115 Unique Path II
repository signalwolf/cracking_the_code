class Solution:
    """
    @param: obstacleGrid: A list of lists of integers
    @return: An integer
    """
    def uniquePathsWithObstacles(self, obstacleGrid):
        # write your code here
        m = len(obstacleGrid)
        if m == 0:
            return 0
        n =  len(obstacleGrid[0])
        if n == 0:
            return 0
        dp = [[0 for i in xrange(n)] for j in xrange (m)]
        if obstacleGrid[0][0] == 0:
            dp[0][0] = 1
        # initial: 
        for i in xrange (1, m):
            if obstacleGrid[i][0] == 1:
                dp[i][0] = 0
            else:
                dp[i][0] = dp[i - 1][0]
        for j in xrange (1, n):
            if obstacleGrid[0][j] == 1:
                dp[0][j] = 0
            else:
                dp[0][j] = dp[0][j - 1]
        for i in xrange (1, m):
            for j in xrange(1, n):
                if obstacleGrid[i][j] == 1:
                    dp[i][j] = 0
                else:
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[m- 1][n - 1]
