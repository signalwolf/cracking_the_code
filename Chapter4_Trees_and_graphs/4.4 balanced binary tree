# lintcode: 93
# Divide and conquer, 到最底下后向上返回，没有子节点回复1，自己是None回复0，当左右返回值不一样时，返回-1；当左边或者右边有-1
# 的时候就要返回-1，因为它的子树就是不balanced.
"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""
class Solution:
    """
    @param root: The root of binary tree.
    @return: True if this Binary tree is Balanced, or false.
    """
    def helper(self, root):
        if root is None: 
            return 0
        else:
            left = self.helper(root.left)
            right = self.helper(root.right)
            # print left, right, root.val
            if left == -1 or right == -1 or abs(left - right) > 1:
                return -1
            else:
                return max (left, right) + 1
            
# helper return the depth of currtree
# if the depth of left node and right node is higher than 1, return false in main.py
# else: return True

    def isBalanced(self, root):
        # write your code here
        return self.helper (root) != -1
        
