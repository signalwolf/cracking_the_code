# 这个问题我利用了BST的定义，以及这是个Sorted array的事实。不断的提出中间点然后左边的中间点作为左子树，右边的中间点作为右子树
# 第二个答案很明显更显优秀，它没有每次trim list的步骤，只是通过index来算。但是相应的这说明binary search的各种方法我都应该要学会啊

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        A = nums
        if len(A) == 0:
            return None
        root = TreeNode (A[len(A)/2])
        root.left = self.sortedArrayToBST (A[:len(A)/2])
        root.right = self.sortedArrayToBST (A[len(A)/2 + 1:])
        return root

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    
    def helper (self, nums, start, end):
        if start + 1 == end:# len not 2
            root = TreeNode (nums[start])
            root.right = TreeNode (nums[end])
        elif start == end: # len not 1
            root = TreeNode (nums[start])
        elif start + 1 < end:
            mid = start + (end - start) / 2
            root = TreeNode (nums[mid])
            root.left = self.helper (nums, start, mid - 1)
            root.right = self.helper (nums, mid + 1 , end)
        else:
            return None
        return root
        
    def sortedArrayToBST(self, nums):
        """
        :type nums: List[int]
        :rtype: TreeNode
        """
        # design: mid = start + end /2; left have have, right have half
        # 0 --5 --> [2] [0,1] [3,4,5]; [0,1] --> mid = 0
        # 0 -- 6 --> [3] [0,1,2] [4,5,6]; [1] (0,0) (2,2)
        # 0 -- 7 ---> [3] [0,1,2] [4,5,6,7]; 
        if len(nums) == 0:
            return []
        if len(nums) == 1:
            return TreeNode (nums[0])
        start, end = 0, len(nums) - 1
        mid = start + (end - start) / 2
        root = TreeNode (nums[mid])
        root.left = self.helper (nums, start, mid - 1)
        root.right = self.helper (nums, mid + 1, end)
        return root
        
# Much more easy than the one above:
class Solution:
    """
    @param: A: an integer array
    @return: A tree node
    """
    def helper (self, A, start, end):
        if end < start:
            return None
        mid = (start + end) / 2
        root = TreeNode (A[mid])
        root.left = self.helper (A, start, mid - 1)
        root.right = self.helper (A, mid + 1, end)
        return root
    
    def sortedArrayToBST(self, A):
        # write your code here
        return self.helper (A, 0, len(A) - 1)
