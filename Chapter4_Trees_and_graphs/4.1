# search的时候是不会考虑当前的node的
# BFS: 由于题目给出了graph，这个在BFS中可以使用list来代替dictionary的作用
# 这道题也可以通过DFS来解
"""
Definition for a Directed graph node
class DirectedGraphNode:
    def __init__(self, x):
        self.label = x
        self.neighbors = []
"""

// BFS --> 807ms; 
class Solution:
    """
    @param: graph: A list of Directed graph node
    @param: s: the starting Directed graph node
    @param: t: the terminal Directed graph node
    @return: a boolean value
    """
    def hasRoute(self, graph, s, t):
        # write your code here
        if s == t:
            return True
        queue = [s]
        hash = {}
        hash[s] = 1
        while queue:
            curr = queue.pop ()
            for neighbor in curr.neighbors:
                if neighbor not in hash:
                    if neighbor == t:
                        return True
                    else:
                        hash[neighbor] = 1
                        queue.append(neighbor)
        return False
  
  // DFS: --> 812ms/ 807ms
  class Solution:
    """
    @param: graph: A list of Directed graph node
    @param: s: the starting Directed graph node
    @param: t: the terminal Directed graph node
    @return: a boolean value
    """
    def helper(self, graph, s, t, dicts):
        if s == t:
            return True
        # recursion:
        # define：s.neighbor 
        # initial: s, t
        # out: s == t
        for i in s.neighbors:
            if i in dicts:
                continue
            result = self.helper(graph, i, t, dicts)
            dicts[i] = 1
            if result:
                return True
        return False
    
    def hasRoute(self, graph, s, t):
        # write your code here
        dicts = {}
        return self.helper (graph, s, t, dicts)
        
 // DFS: --> 959ms
 // 通过先update dictionary来使得后面只是update：
 # // DFS: --> 812ms/ 807ms
class Solution:
    """
    @param: graph: A list of Directed graph node
    @param: s: the starting Directed graph node
    @param: t: the terminal Directed graph node
    @return: a boolean value
    """
    def helper(self, graph, s, t, dicts):
        if s == t:
            return True
        # recursion:
        # define：s.neighbor 
        # initial: s, t
        # out: s == t
        for i in s.neighbors:
            if dicts[i] == 1:
                continue
            result = self.helper(graph, i, t, dicts)
            dicts[i] = 1
            if result:
                return True
        return False
    
    def hasRoute(self, graph, s, t):
        # write your code here
        dicts = {}
        for i in graph:
            dicts[i] = 0
        return self.helper (graph, s, t, dicts)
