# Lintcode 88:

"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""
import copy
class Solution:
    """
    @param root: The root of the binary search tree.
    @param A and B: two nodes in a Binary.
    @return: Return the least common ancestor(LCA) of the two nodes.
    """ 
    
    def lowestCommonAncestor(self, root, A, B):
        # write your code here
        if root is None:
            return root
        elif A == B:
            return A
        else:
        # output:
        # if left have A/B and right have the another one, return root
        # if left have A/B and root is another one, return root
        # if left have A/B and root/right don't have the other one, return A/B
        # else: return None
            left = self.lowestCommonAncestor(root.left, A, B)
            right = self.lowestCommonAncestor(root.right, A, B)
            if root == A or root == B:
                return root
            elif left and right:
                return root
            elif left:
                return left
            elif right:
                return right
            else:
                return None
